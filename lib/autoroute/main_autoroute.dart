/// AutoRoute implementation for complex nested navigation
/// Demonstrates code generation-based routing with type safety
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
// ignore: depend_on_referenced_packages
import 'package:flutter_web_plugins/url_strategy.dart';

/// Auto-generated file by AutoRoute containing route definitions
/// Generated by running: dart run build_runner build
import 'package:nested_navigation_gorouter_example/autoroute/main_autoroute.gr.dart';
import 'package:nested_navigation_gorouter_example/shared/widgets/details_screen.dart';
import 'package:nested_navigation_gorouter_example/shared/widgets/scaffold_with_nested_navigation.dart';

/// Entry point for the AutoRoute navigation example
/// Demonstrates type-safe routing with code generation
void main() {
  // Remove '#' from URLs on web for cleaner URLs
  usePathUrlStrategy();
  runApp(NestedNavigationApp());
}

/// Root application widget using AutoRoute for navigation
/// AutoRoute provides type-safe routing through code generation
class NestedNavigationApp extends StatelessWidget {
  NestedNavigationApp({super.key});

  /// Custom router instance that handles all app navigation
  /// Generated routes provide compile-time type safety
  final nestedRouter = NestedRouter();

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      // AutoRoute router configuration with generated routes
      routerConfig: nestedRouter.config(),
      debugShowCheckedModeBanner: false,
      theme: ThemeData(primarySwatch: Colors.indigo),
    );
  }
}

/// AutoRoute router configuration with code generation annotation
/// @AutoRouterConfig() enables code generation for type-safe routing
@AutoRouterConfig()
class NestedRouter extends RootStackRouter {
  /// Define the application's route structure
  /// AutoRoute generates type-safe route classes from this configuration
  @override
  List<AutoRoute> get routes => [
        /// Root application route (/) with nested tab structure
        AutoRoute(
          path: '/',
          initial: true, // Default route at startup
          page: HostRoute.page, // Generated page class for HostScreen
          children: [
            /// Section A branch - handles /a and /a/details
            AutoRoute(
              path: 'a', // URL path: /a
              page: SectionAWrapperRoute.page, // Wrapper for nested navigation
              children: [
                /// Root page for Section A
                AutoRoute(
                  path: '', // Empty path = default child route
                  page: SectionARoute.page,
                  initial: true, // Default route when navigating to /a
                ),

                /// Details page for Section A
                AutoRoute(
                  path: 'details', // URL path: /a/details
                  page: DetailsARoute.page,
                ),
              ],
            ),

            /// Section B branch - handles /b and /b/details
            AutoRoute(
              path: 'b', // URL path: /b
              page: SectionBWrapperRoute.page, // Wrapper for nested navigation
              children: [
                /// Root page for Section B
                AutoRoute(
                  path: '', // Empty path = default child route
                  page: SectionBRoute.page,
                  initial: true, // Default route when navigating to /b
                ),

                /// Details page for Section B with reset functionality
                AutoRoute(
                  path: 'details', // URL path: /b/details
                  page: DetailsBRoute.page,
                ),
              ],
            ),
          ],
        ),
      ];
}

/// Main screen that handles tab navigation using AutoTabsRouter
/// @RoutePage() annotation enables code generation for this screen
@RoutePage()
class HostScreen extends StatelessWidget {
  const HostScreen({super.key});

  @override
  Widget build(BuildContext context) {
    /// AutoTabsRouter automatically handles navigation between tabs
    /// Maintains each tab's navigation state independently
    /// This is AutoRoute's equivalent to GoRouter's StatefulShellRoute
    return AutoTabsRouter(
      /// Define available tab routes using generated route classes
      /// Each route corresponds to a tab with its own navigation stack
      routes: [
        SectionAWrapperRoute(), // Tab A with nested navigation
        SectionBWrapperRoute(), // Tab B with nested navigation
      ],

      /// Builder called whenever tab state changes
      /// Provides the current child widget and access to tab router
      builder: (context, child) {
        /// Get tabs router instance to control tab navigation
        /// Provides methods like setActiveIndex, navigate, etc.
        final tabsRouter = AutoTabsRouter.of(context);

        /// Responsive design: adapt UI based on screen size
        return LayoutBuilder(
          builder: (context, constraints) {
            /// Mobile layout: bottom navigation bar
            if (constraints.maxWidth < 450) {
              return ScaffoldWithNavigationBar(
                body: child, // Current tab's content
                selectedIndex: tabsRouter.activeIndex,
                onDestinationSelected: (index) {
                  tabsRouter.setActiveIndex(
                    index,

                    /// notify: false prevents rebuilding when tapping active tab
                    /// This allows navigation to root of active tab
                    notify: index != tabsRouter.activeIndex,
                  );
                },
              );
            } else {
              /// Desktop/tablet layout: left navigation rail
              return ScaffoldWithNavigationRail(
                body: child,
                selectedIndex: tabsRouter.activeIndex,
                onDestinationSelected: (index) {
                  tabsRouter.setActiveIndex(
                    index,
                    notify: index != tabsRouter.activeIndex,
                  );
                },
              );
            }
          },
        );
      },
    );
  }
}

/// Wrapper for Section A - Handles nested navigation within tab A
/// Acts as a nested router for all routes under /a
@RoutePage()
class SectionAWrapperScreen extends StatelessWidget {
  const SectionAWrapperScreen({super.key});

  @override
  Widget build(BuildContext context) {
    /// AutoRouter() creates a new navigation context for child routes
    /// This enables nested navigation within this tab
    /// All child routes (SectionARoute, DetailsARoute) render here
    return const AutoRouter();
  }
}

/// Wrapper for Section B - Handles nested navigation within tab B
/// Acts as a nested router for all routes under /b
@RoutePage()
class SectionBWrapperScreen extends StatelessWidget {
  const SectionBWrapperScreen({super.key});

  @override
  Widget build(BuildContext context) {
    /// Each wrapper maintains its own independent navigation stack
    /// This isolation allows complex navigation patterns within each tab
    return const AutoRouter();
  }
}

/// Main screen for Section A - Root page of tab A
/// @RoutePage() enables AutoRoute code generation for this screen
@RoutePage()
class SectionAScreen extends StatelessWidget {
  const SectionAScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Section A"),

        /// Disable automatic back button as this is the root page of the tab
        automaticallyImplyLeading: false,
      ),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: <Widget>[
            Text(
              "This is the root screen for section A",
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const Padding(padding: EdgeInsets.all(4)),
            TextButton(
              /// Type-safe navigation using generated route classes
              /// context.pushRoute() is AutoRoute's navigation method
              onPressed: () => context.pushRoute(DetailsARoute()),
              child: const Text("Show Details"),
            ),
          ],
        ),
      ),
    );
  }
}

/// Main screen for Section B - Root page of tab B
/// @RoutePage() enables AutoRoute code generation for this screen
@RoutePage()
class SectionBScreen extends StatelessWidget {
  const SectionBScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Section B"),

        /// No back button as this is the root page of the tab
        automaticallyImplyLeading: false,
      ),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: <Widget>[
            Text(
              "This is the root screen for section B",
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const Padding(padding: EdgeInsets.all(4)),
            TextButton(
              /// Type-safe navigation to details page
              /// AutoRoute generates compile-time safe route classes
              onPressed: () => context.pushRoute(DetailsBRoute()),
              child: const Text("Show Details"),
            ),
          ],
        ),
      ),
    );
  }
}

/// Details screen for Section A
/// @RoutePage() enables AutoRoute code generation for this screen
@RoutePage()
class DetailsAScreen extends StatelessWidget {
  const DetailsAScreen({super.key});

  @override
  Widget build(BuildContext context) {
    /// Uses shared DetailsScreen widget for consistency
    /// No special navigation logic needed for Section A
    return DetailsScreen(
      label: "A",
    );
  }
}

/// Details screen for Section B with complex cross-tab navigation
/// Demonstrates AutoRoute's advanced navigation capabilities
@RoutePage()
class DetailsBScreen extends StatelessWidget {
  const DetailsBScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return DetailsScreen(
      label: "B",

      /// Complex cross-tab navigation with state reset
      /// Demonstrates AutoRoute's type-safe navigation methods
      onResetPressed: () {
        /// Step 1: Reset current tab B navigation stack to root
        /// popUntilRoot() removes all pages until reaching the tab root
        context.router.popUntilRoot();

        /// Step 2: Navigate to Section A from the root router
        /// context.router.root accesses the top-level router
        /// This switches tabs and navigates to Section A
        context.router.root.navigate(SectionAWrapperRoute());
      },
    );
  }
}
